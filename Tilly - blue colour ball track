// --- Libraries ---
import processing.video.*;
import oscP5.*;
import netP5.*;

// --- Webcam + OSC setup ---
Capture cam;
OscP5 oscP5;
NetAddress wekinator;

// --- Target colors (you can click to resample) ---
color targetBlue = color(10, 40, 130);
color targetRed  = color(180, 20, 30);
float threshold = 70; // tolerance (increase if lighting varies)

// --- Positions ---
float blueX = 0, blueY = 0;
float redX = 0, redY = 0;

void setup() {
  size(640, 480);

  // List all available cameras
  String[] cameras = Capture.list();

  if (cameras == null || cameras.length == 0) {
    println("No cameras found!");
    exit();
  }

  println("Available cameras:");
  for (int i = 0; i < cameras.length; i++) {
    println(i + ": " + cameras[i]);
  }

  // Pick your external webcam manually by its index (check console)
  int camIndex = 1;  // <-- Change this after you see the printed list

  // Initialize the chosen camera
  cam = new Capture(this, cameras[camIndex]);
  cam.start();
  
  // --- OSC setup ---
  oscP5 = new OscP5(this, 12000); // receive from Wekinator if needed
  wekinator = new NetAddress("127.0.0.1", 6448); // send to Wekinator
  
  println("Tracking blue and red balls...");
}

void draw() {
  if (cam.available()) cam.read();
  image(cam, 0, 0);
  
  // --- Track both colors ---
  PVector bluePos = trackColor(targetBlue);
  PVector redPos  = trackColor(targetRed);

  // --- Draw + normalize blue ball ---
  if (bluePos != null) {
    fill(0, 0, 255);
    noStroke();
    ellipse(bluePos.x, bluePos.y, 25, 25);
    blueX = bluePos.x / width;
    blueY = bluePos.y / height;
  } else {
    fill(255, 0, 0);
    text("Blue not found", 10, 20);
  }

  // --- Draw + normalize red ball ---
  if (redPos != null) {
    fill(255, 0, 0);
    noStroke();
    ellipse(redPos.x, redPos.y, 25, 25);
    redX = redPos.x / width;
    redY = redPos.y / height;
  } else {
    fill(255, 0, 0);
    text("Red not found", 10, 40);
  }

  // --- Send to Wekinator ---
  OscMessage msg = new OscMessage("/wek/inputs");
  msg.add(blueX);
  msg.add(blueY);
  msg.add(redX);
  msg.add(redY);
  oscP5.send(msg, wekinator);

  // --- Display coordinates on screen ---
  fill(255);
  textSize(14);
  text("Blue: " + nf(blueX, 1, 2) + ", " + nf(blueY, 1, 2), 10, height - 40);
  text("Red:  " + nf(redX, 1, 2) + ", " + nf(redY, 1, 2), 10, height - 20);
}

// --- Color tracking function (RGB distance) ---
PVector trackColor(color target) {
  cam.loadPixels();
  float avgX = 0, avgY = 0;
  int count = 0;
  
  for (int i = 0; i < cam.pixels.length; i++) {
    color c = cam.pixels[i];
    float d = dist(red(c), green(c), blue(c),
                   red(target), green(target), blue(target));
    if (d < threshold) {
      avgX += i % cam.width;
      avgY += i / cam.width;
      count++;
    }
  }

  if (count > 0) {
    avgX /= count;
    avgY /= count;
    return new PVector(avgX, avgY);
  } else {
    return null;
  }
}

// --- Click to sample color dynamically ---
void mousePressed() {
  if (cam.width == 0) return;
  color clicked = cam.get(mouseX, mouseY);
  
  if (mouseButton == LEFT) {
    targetBlue = clicked;
    println("Sampled blue color = (" + red(clicked) + ", " + green(clicked) + ", " + blue(clicked) + ")");
  } else if (mouseButton == RIGHT) {
    targetRed = clicked;
    println("Sampled red color = (" + red(clicked) + ", " + green(clicked) + ", " + blue(clicked) + ")");
  }
}
